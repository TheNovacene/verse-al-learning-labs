<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphical Simultaneous Equations Solver</title>
    <style>
        body {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100%;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .header p {
            margin: 10px 0 0 0;
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 30px;
            padding: 30px;
        }

        .controls-panel {
            background: #f8fafc;
            border-radius: 15px;
            padding: 25px;
            border: 2px solid #e2e8f0;
        }

        .equation-group {
            margin-bottom: 25px;
            padding: 20px;
            border-radius: 12px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .equation-group.line1 {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            border-color: #ff6b9d;
        }

        .equation-group.line2 {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            border-color: #4ecdc4;
        }

        .equation-label {
            font-weight: 700;
            font-size: 1.2rem;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .color-indicator {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .line1 .color-indicator {
            background: #ff6b9d;
        }

        .line2 .color-indicator {
            background: #4ecdc4;
        }

        .equation-inputs {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .equation-inputs input {
            width: 60px;
            padding: 8px 12px;
            border: 2px solid #cbd5e0;
            border-radius: 8px;
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            background: white;
            transition: all 0.3s ease;
        }

        .equation-inputs input:focus {
            outline: none;
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
        }

        .graph-container {
            background: white;
            border-radius: 15px;
            border: 2px solid #e2e8f0;
            padding: 20px;
            position: relative;
        }

        .graph-canvas {
            width: 100%;
            height: 500px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: #fafafa;
            cursor: crosshair;
        }

        .solution-panel {
            grid-column: 1 / -1;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            margin-top: 20px;
        }

        .solution-text {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .intersection-point {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .controls-buttons {
            display: flex;
            gap: 15px;
            margin-top: 25px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 120px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        }

        .zoom-controls {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            align-items: center;
        }

        .zoom-btn {
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 8px;
            background: #4299e1;
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .zoom-btn:hover {
            background: #3182ce;
            transform: scale(1.1);
        }

        .zoom-level {
            font-weight: 600;
            color: #4a5568;
        }

        .toggle-equations {
            margin-top: 15px;
        }

        .toggle-checkbox {
            margin-right: 8px;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 20px;
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .equation-inputs {
                justify-content: center;
            }
            
            .controls-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>📊 Graphical Equations Solver</h1>
            <p>Visualize and solve simultaneous linear equations by finding their intersection point</p>
        </header>

        <main class="main-content">
            <div class="controls-panel">
                <div class="equation-group line1">
                    <div class="equation-label">
                        <div class="color-indicator"></div>
                        Line 1 Equation
                    </div>
                    <div class="equation-inputs">
                        <span>y =</span>
                        <input type="number" id="m1" value="2" step="0.1">
                        <span>x +</span>
                        <input type="number" id="c1" value="1" step="0.1">
                    </div>
                </div>

                <div class="equation-group line2">
                    <div class="equation-label">
                        <div class="color-indicator"></div>
                        Line 2 Equation
                    </div>
                    <div class="equation-inputs">
                        <span>y =</span>
                        <input type="number" id="m2" value="-1" step="0.1">
                        <span>x +</span>
                        <input type="number" id="c2" value="4" step="0.1">
                    </div>
                </div>

                <div class="controls-buttons">
                    <button class="btn btn-primary" onclick="generateRandomEquations()">🎲 Random</button>
                    <button class="btn btn-secondary" onclick="resetToDefault()">🔄 Reset</button>
                </div>

                <div class="zoom-controls">
                    <button class="zoom-btn" onclick="zoomOut()">−</button>
                    <span class="zoom-level">Zoom: <span id="zoomLevel">1x</span></span>
                    <button class="zoom-btn" onclick="zoomIn()">+</button>
                </div>

                <div class="toggle-equations">
                    <label>
                        <input type="checkbox" class="toggle-checkbox" id="showEquations" checked onchange="toggleEquationVisibility()">
                        Show equation labels on graph
                    </label>
                </div>

                <div class="verification-section" id="verificationSection" style="display: none;">
                    <h3 style="color: #4a5568; margin-bottom: 15px; font-size: 1.1rem;">✅ Verify Solution</h3>
                    <p style="color: #666; margin-bottom: 15px; font-size: 0.9rem;">
                        Enter the intersection coordinates below and substitute them into both equations:
                    </p>
                    
                    <div style="background: #f7fafc; border: 2px solid #e2e8f0; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                        <div style="font-weight: 600; margin-bottom: 10px;">Intersection Point:</div>
                        <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span>x =</span>
                                <input type="number" id="verifyX" step="0.1" style="width: 70px; padding: 5px 8px; border: 2px solid #cbd5e0; border-radius: 5px; text-align: center;">
                            </div>
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span>y =</span>
                                <input type="number" id="verifyY" step="0.1" style="width: 70px; padding: 5px 8px; border: 2px solid #cbd5e0; border-radius: 5px; text-align: center;">
                            </div>
                            <button onclick="checkVerification()" style="padding: 8px 16px; background: #4299e1; color: white; border: none; border-radius: 5px; cursor: pointer; font-weight: 600;">Check</button>
                            <button onclick="fillCorrectValues()" style="padding: 8px 16px; background: #48bb78; color: white; border: none; border-radius: 5px; cursor: pointer; font-weight: 600;">Show Answer</button>
                        </div>
                    </div>
                    
                    <div class="verification-equations">
                        <div class="verify-equation" style="background: #fff5f5; border: 2px solid #fed7d7; border-radius: 8px; padding: 15px; margin-bottom: 10px;">
                            <div style="font-weight: 600; color: #c53030; margin-bottom: 8px;">Line 1 Check:</div>
                            <div id="verification1" style="font-family: monospace; font-size: 1rem; color: #2d3748;">Enter values above and click "Check" to see the substitution</div>
                        </div>
                        
                        <div class="verify-equation" style="background: #f0fff4; border: 2px solid #c6f6d5; border-radius: 8px; padding: 15px;">
                            <div style="font-weight: 600; color: #38a169; margin-bottom: 8px;">Line 2 Check:</div>
                            <div id="verification2" style="font-family: monospace; font-size: 1rem; color: #2d3748;">Enter values above and click "Check" to see the substitution</div>
                        </div>
                    </div>
                    
                    <div id="verificationResult" style="margin-top: 15px; padding: 12px; border-radius: 8px; font-weight: 600; text-align: center; display: none;"></div>
                </div>
            </div>

            <div class="graph-container">
                <canvas id="graphCanvas" class="graph-canvas"></canvas>
            </div>

            <div class="solution-panel" id="solutionPanel">
                <div class="solution-text" id="solutionText">The lines intersect at one point</div>
                <div class="intersection-point" id="intersectionPoint">Solution: x = 1, y = 3</div>
            </div>
        </main>
    </div>

    <script>
        let canvas, ctx;
        let scale = 20; // pixels per unit
        let zoom = 1;
        let showEquationLabels = true;

        function initCanvas() {
            canvas = document.getElementById('graphCanvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas size
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            
            // Add event listeners for input changes
            ['m1', 'c1', 'm2', 'c2'].forEach(id => {
                document.getElementById(id).addEventListener('input', drawGraph);
            });
            
            drawGraph();
        }

        function drawGraph() {
            const width = canvas.width;
            const height = canvas.height;
            const centerX = width / 2;
            const centerY = height / 2;
            
            // Clear canvas
            ctx.clearRect(0, 0, width, height);
            
            // Draw grid
            drawGrid(centerX, centerY);
            
            // Draw axes
            drawAxes(centerX, centerY);
            
            // Get equation parameters
            const m1 = parseFloat(document.getElementById('m1').value) || 0;
            const c1 = parseFloat(document.getElementById('c1').value) || 0;
            const m2 = parseFloat(document.getElementById('m2').value) || 0;
            const c2 = parseFloat(document.getElementById('c2').value) || 0;
            
            // Draw lines
            drawLine(m1, c1, '#ff6b9d', 'Line 1: y = ' + m1 + 'x + ' + c1, centerX, centerY);
            drawLine(m2, c2, '#4ecdc4', 'Line 2: y = ' + m2 + 'x + ' + c2, centerX, centerY);
            
            // Find and draw intersection
            findIntersection(m1, c1, m2, c2, centerX, centerY);
        }

        function drawGrid(centerX, centerY) {
            ctx.strokeStyle = '#e2e8f0';
            ctx.lineWidth = 1;
            
            const gridSize = scale * zoom;
            
            // Vertical lines
            for (let x = centerX % gridSize; x < canvas.width; x += gridSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            
            // Horizontal lines
            for (let y = centerY % gridSize; y < canvas.height; y += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
        }

        function drawAxes(centerX, centerY) {
            ctx.strokeStyle = '#4a5568';
            ctx.lineWidth = 2;
            
            // X-axis
            ctx.beginPath();
            ctx.moveTo(0, centerY);
            ctx.lineTo(canvas.width, centerY);
            ctx.stroke();
            
            // Y-axis
            ctx.beginPath();
            ctx.moveTo(centerX, 0);
            ctx.lineTo(centerX, canvas.height);
            ctx.stroke();
            
            // Draw axis labels
            ctx.fillStyle = '#4a5568';
            ctx.font = '14px Arial';
            ctx.textAlign = 'center';
            
            const gridSize = scale * zoom;
            
            // X-axis numbers
            for (let i = -10; i <= 10; i++) {
                if (i !== 0) {
                    const x = centerX + i * gridSize;
                    if (x > 0 && x < canvas.width) {
                        ctx.fillText(i.toString(), x, centerY + 20);
                    }
                }
            }
            
            // Y-axis numbers
            ctx.textAlign = 'right';
            for (let i = -10; i <= 10; i++) {
                if (i !== 0) {
                    const y = centerY - i * gridSize;
                    if (y > 0 && y < canvas.height) {
                        ctx.fillText(i.toString(), centerX - 10, y + 5);
                    }
                }
            }
            
            // Origin
            ctx.textAlign = 'right';
            ctx.fillText('0', centerX - 10, centerY + 20);
        }

        function drawLine(m, c, color, label, centerX, centerY) {
            ctx.strokeStyle = color;
            ctx.lineWidth = 3;
            
            const gridSize = scale * zoom;
            
            // Calculate line points
            const x1 = -canvas.width;
            const y1 = m * (x1 - centerX) / gridSize + c;
            const x2 = canvas.width * 2;
            const y2 = m * (x2 - centerX) / gridSize + c;
            
            // Convert to canvas coordinates
            const canvasY1 = centerY - y1 * gridSize;
            const canvasY2 = centerY - y2 * gridSize;
            
            ctx.beginPath();
            ctx.moveTo(x1, canvasY1);
            ctx.lineTo(x2, canvasY2);
            ctx.stroke();
            
            // Draw equation label if enabled
            if (showEquationLabels) {
                ctx.fillStyle = color;
                ctx.font = 'bold 16px Arial';
                ctx.textAlign = 'left';
                
                // Position label at a visible point on the line
                const labelX = centerX + 2 * gridSize;
                const labelY = centerY - (m * 2 + c) * gridSize;
                
                if (labelY > 20 && labelY < canvas.height - 20) {
                    ctx.fillText(label, labelX + 10, labelY);
                }
            }
        }

        function findIntersection(m1, c1, m2, c2, centerX, centerY) {
            const gridSize = scale * zoom;
            
            // Check for parallel lines
            if (Math.abs(m1 - m2) < 0.0001) {
                if (Math.abs(c1 - c2) < 0.0001) {
                    updateSolution("The lines are identical", "Infinite solutions (same line)");
                    hideVerification();
                } else {
                    updateSolution("The lines are parallel", "No solution (lines never meet)");
                    hideVerification();
                }
                return;
            }
            
            // Calculate intersection point
            const x = (c2 - c1) / (m1 - m2);
            const y = m1 * x + c1;
            
            // Convert to canvas coordinates
            const canvasX = centerX + x * gridSize;
            const canvasY = centerY - y * gridSize;
            
            // Draw intersection point if it's visible
            if (canvasX >= 0 && canvasX <= canvas.width && canvasY >= 0 && canvasY <= canvas.height) {
                ctx.fillStyle = '#e53e3e';
                ctx.beginPath();
                ctx.arc(canvasX, canvasY, 8, 0, 2 * Math.PI);
                ctx.fill();
                
                // Draw point outline
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // Draw coordinates label
                ctx.fillStyle = '#e53e3e';
                ctx.font = 'bold 14px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(`(${x.toFixed(1)}, ${y.toFixed(1)})`, canvasX, canvasY - 15);
            }
            
            updateSolution("The lines intersect at one point", `Solution: x = ${x.toFixed(2)}, y = ${y.toFixed(2)}`);
            showVerification(x, y, m1, c1, m2, c2);
        }

        function updateSolution(mainText, detailText) {
            document.getElementById('solutionText').textContent = mainText;
            document.getElementById('intersectionPoint').textContent = detailText;
        }

        function generateRandomEquations() {
            // Generate equations that will have integer intersection points
            const x = Math.floor(Math.random() * 11) - 5; // -5 to 5
            const y = Math.floor(Math.random() * 11) - 5; // -5 to 5
            
            const m1 = Math.floor(Math.random() * 7) - 3; // -3 to 3
            const m2 = Math.floor(Math.random() * 7) - 3; // -3 to 3
            
            // Ensure slopes are different
            if (Math.abs(m1 - m2) < 0.1) {
                generateRandomEquations();
                return;
            }
            
            const c1 = y - m1 * x;
            const c2 = y - m2 * x;
            
            document.getElementById('m1').value = m1;
            document.getElementById('c1').value = c1;
            document.getElementById('m2').value = m2;
            document.getElementById('c2').value = c2;
            
            drawGraph();
        }

        function resetToDefault() {
            document.getElementById('m1').value = 2;
            document.getElementById('c1').value = 1;
            document.getElementById('m2').value = -1;
            document.getElementById('c2').value = 4;
            zoom = 1;
            document.getElementById('zoomLevel').textContent = '1x';
            drawGraph();
        }

        function zoomIn() {
            zoom = Math.min(zoom * 1.2, 3);
            document.getElementById('zoomLevel').textContent = zoom.toFixed(1) + 'x';
            drawGraph();
        }

        function zoomOut() {
            zoom = Math.max(zoom / 1.2, 0.3);
            document.getElementById('zoomLevel').textContent = zoom.toFixed(1) + 'x';
            drawGraph();
        }

        function toggleEquationVisibility() {
            showEquationLabels = document.getElementById('showEquations').checked;
            drawGraph();
        }

        let correctX, correctY, currentM1, currentC1, currentM2, currentC2;

        function showVerification(x, y, m1, c1, m2, c2) {
            const verificationSection = document.getElementById('verificationSection');
            verificationSection.style.display = 'block';
            
            // Store correct values and current equation parameters
            correctX = x;
            correctY = y;
            currentM1 = m1;
            currentC1 = c1;
            currentM2 = m2;
            currentC2 = c2;
            
            // Clear input fields and reset verification display
            document.getElementById('verifyX').value = '';
            document.getElementById('verifyY').value = '';
            document.getElementById('verification1').innerHTML = 'Enter values above and click "Check" to see the substitution';
            document.getElementById('verification2').innerHTML = 'Enter values above and click "Check" to see the substitution';
            document.getElementById('verificationResult').style.display = 'none';
        }

        function checkVerification() {
            const inputX = parseFloat(document.getElementById('verifyX').value);
            const inputY = parseFloat(document.getElementById('verifyY').value);
            
            if (isNaN(inputX) || isNaN(inputY)) {
                document.getElementById('verificationResult').innerHTML = '⚠️ Please enter both x and y values';
                document.getElementById('verificationResult').style.display = 'block';
                document.getElementById('verificationResult').style.background = '#fef5e7';
                document.getElementById('verificationResult').style.color = '#744210';
                document.getElementById('verificationResult').style.border = '2px solid #d69e2e';
                return;
            }
            
            // Format numbers for display
            const xVal = inputX.toFixed(2);
            const yVal = inputY.toFixed(2);
            const m1Val = currentM1.toFixed(2);
            const c1Val = currentC1.toFixed(2);
            const m2Val = currentM2.toFixed(2);
            const c2Val = currentC2.toFixed(2);
            
            // Calculate right sides for both equations
            const rightSide1 = currentM1 * inputX + currentC1;
            const rightSide2 = currentM2 * inputX + currentC2;
            
            // Create verification text for equation 1
            const verification1Text = `
                y = ${m1Val}x + ${c1Val}
                ${yVal} = ${m1Val}(${xVal}) + ${c1Val}
                ${yVal} = ${(currentM1 * inputX).toFixed(2)} + ${c1Val}
                ${yVal} = ${rightSide1.toFixed(2)}
            `;
            
            // Create verification text for equation 2
            const verification2Text = `
                y = ${m2Val}x + ${c2Val}
                ${yVal} = ${m2Val}(${xVal}) + ${c2Val}
                ${yVal} = ${(currentM2 * inputX).toFixed(2)} + ${c2Val}
                ${yVal} = ${rightSide2.toFixed(2)}
            `;
            
            document.getElementById('verification1').innerHTML = verification1Text.replace(/\n/g, '<br>');
            document.getElementById('verification2').innerHTML = verification2Text.replace(/\n/g, '<br>');
            
            // Check if both equations are satisfied (within small tolerance for floating point)
            const tolerance = 0.01;
            const equation1Satisfied = Math.abs(inputY - rightSide1) < tolerance;
            const equation2Satisfied = Math.abs(inputY - rightSide2) < tolerance;
            
            const resultDiv = document.getElementById('verificationResult');
            resultDiv.style.display = 'block';
            
            if (equation1Satisfied && equation2Satisfied) {
                resultDiv.innerHTML = '🎉 Excellent! Both equations are satisfied. Your solution is correct!';
                resultDiv.style.background = '#c6f6d5';
                resultDiv.style.color = '#22543d';
                resultDiv.style.border = '2px solid #38a169';
            } else if (equation1Satisfied) {
                resultDiv.innerHTML = '⚠️ Line 1 equation is satisfied, but Line 2 is not. Check your y-value.';
                resultDiv.style.background = '#fef5e7';
                resultDiv.style.color = '#744210';
                resultDiv.style.border = '2px solid #d69e2e';
            } else if (equation2Satisfied) {
                resultDiv.innerHTML = '⚠️ Line 2 equation is satisfied, but Line 1 is not. Check your y-value.';
                resultDiv.style.background = '#fef5e7';
                resultDiv.style.color = '#744210';
                resultDiv.style.border = '2px solid #d69e2e';
            } else {
                resultDiv.innerHTML = '❌ Neither equation is satisfied. Try reading the coordinates more carefully from the graph.';
                resultDiv.style.background = '#fed7d7';
                resultDiv.style.color = '#742a2a';
                resultDiv.style.border = '2px solid #e53e3e';
            }
        }

        function fillCorrectValues() {
            document.getElementById('verifyX').value = correctX.toFixed(2);
            document.getElementById('verifyY').value = correctY.toFixed(2);
            checkVerification();
        }

        function hideVerification() {
            document.getElementById('verificationSection').style.display = 'none';
        }

        // Initialize when page loads
        window.addEventListener('load', initCanvas);
        window.addEventListener('resize', () => {
            setTimeout(() => {
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
                drawGraph();
            }, 100);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9927b511a1b64135',t:'MTc2MTEyMjYwOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
